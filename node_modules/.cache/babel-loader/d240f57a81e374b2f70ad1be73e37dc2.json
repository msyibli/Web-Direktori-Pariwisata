{"ast":null,"code":"import _asyncToGenerator from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/xampp/htdocs/Web-Direktori-Pariwisata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:\\\\xampp\\\\htdocs\\\\Web-Direktori-Pariwisata\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/**\n * @remix-run/router v1.3.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    var nextAction = Action.Pop;\n    var nextIndex = getIndex();\n\n    if (nextIndex != null) {\n      var delta = nextIndex - index;\n      action = nextAction;\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: history.location,\n          delta: delta\n        });\n      }\n    } else {\n      warning$1(false, // TODO: Write up a doc that explains our blocking strategy in detail\n      // and link to it here so people can understand better what is going on\n      // and how to avoid it.\n      \"You are trying to block a POP navigation to a location that was not \" + \"created by @remix-run/router. The block will fail silently in \" + \"production, but in general you should do all navigation with the \" + \"router (instead of using window.history.pushState directly) \" + \"to avoid this situation.\");\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref12 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref12.pathname,\n      _ref12$search = _ref12.search,\n      search = _ref12$search === void 0 ? \"\" : _ref12$search,\n      _ref12$hash = _ref12.hash,\n      hash = _ref12$hash === void 0 ? \"\" : _ref12$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref13 = _slicedToArray(_ref, 2),\n          key = _ref13[0],\n          value = _ref13[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    this.init = responseInit;\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeysSet.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this5 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref14 = _slicedToArray(_ref2, 2),\n            key = _ref14[0],\n            value = _ref14[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n\n  var activeBlocker = null; // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location,\n          delta = _ref.delta; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n\n      if (blockerKey) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n            key = _step2$value[0];\n\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n\n              if (!blockerKey) {\n                _context2.next = 15;\n                break;\n              }\n\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  }); // Send the same navigation through\n\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  deleteBlocker(blockerKey);\n                  updateState({\n                    blockers: new Map(state.blockers)\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              _context2.next = 17;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 17:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 14;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 14:\n              if (!isHashChangeOnly(state.location, location)) {\n                _context3.next = 17;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 17:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 23;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 34;\n              break;\n\n            case 23:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 34;\n                break;\n              }\n\n              _context3.next = 26;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 26:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 29;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 29:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation; // Create a GET request for the loaders\n\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n\n            case 34:\n              _context3.next = 36;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 36:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 42;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 42:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 44:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 17;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = _extends({\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                }, submission);\n                loadingNavigation = navigation;\n              } // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n\n              activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n                formMethod: loadingNavigation.formMethod,\n                formAction: loadingNavigation.formAction,\n                formData: loadingNavigation.formData,\n                formEncType: loadingNavigation.formEncType\n              } : undefined;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 8;\n                break;\n              }\n\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}));\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 8:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (_ref2) {\n                  var _ref15 = _slicedToArray(_ref2, 1),\n                      key = _ref15[0];\n\n                  var fetcher = state.fetchers.get(key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined,\n                    \" _hasFetcherDoneAnything \": true\n                  };\n                  state.fetchers.set(key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (_ref3) {\n                var _ref16 = _slicedToArray(_ref3, 1),\n                    key = _ref16[0];\n\n                return fetchControllers.set(key, pendingNavigationController);\n              });\n              _context5.next = 13;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 13:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 19;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 19:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (_ref4) {\n                var _ref17 = _slicedToArray(_ref4, 1),\n                    key = _ref17[0];\n\n                return fetchControllers.delete(key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n\n              _context5.next = 24;\n              return startRedirectNavigation(state, redirect, {\n                replace: replace\n              });\n\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 26;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                isFetchActionRedirect: true\n              }));\n\n            case 26:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 31;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 31:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission, {\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined, // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (_ref5) {\n                var _ref18 = _slicedToArray(_ref5, 1),\n                    staleKey = _ref18[0];\n\n                return staleKey !== key;\n              }).forEach(function (_ref6) {\n                var _ref19 = _slicedToArray(_ref6, 1),\n                    staleKey = _ref19[0];\n\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 44;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 44:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 50;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 50:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (_ref7) {\n                var _ref20 = _slicedToArray(_ref7, 1),\n                    staleKey = _ref20[0];\n\n                return fetchControllers.delete(staleKey);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 56;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n\n            case 56:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 61:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = _extends({\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n\n              _context7.next = 23;\n              return startRedirectNavigation(state, result);\n\n            case 23:\n              return _context7.abrupt(\"return\");\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref21, submission, replace, isFetchActionRedirect, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref21 = _temp === void 0 ? {} : _temp, submission = _ref21.submission, replace = _ref21.replace, isFetchActionRedirect = _ref21.isFetchActionRedirect;\n\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n              _extends({\n                _isRedirect: true\n              }, isFetchActionRedirect ? {\n                _isFetchActionRedirect: true\n              } : {}));\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n              if (!(isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n                _context8.next = 9;\n                break;\n              }\n\n              newOrigin = init.history.createURL(redirect.location).origin;\n\n              if (!(window.location.origin !== newOrigin)) {\n                _context8.next = 9;\n                break;\n              }\n\n              if (replace) {\n                window.location.replace(redirect.location);\n              } else {\n                window.location.assign(redirect.location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 9:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n\n              if (!submission && formMethod && formAction && formData && formEncType) {\n                submission = {\n                  formMethod: formMethod,\n                  formAction: formAction,\n                  formEncType: formEncType,\n                  formData: formData\n                };\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n                _context8.next = 18;\n                break;\n              }\n\n              _context8.next = 16;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, submission, {\n                  formAction: redirect.location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 16:\n              _context8.next = 20;\n              break;\n\n            case 18:\n              _context8.next = 20;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: {\n                  state: \"loading\",\n                  location: redirectLocation,\n                  formMethod: submission ? submission.formMethod : undefined,\n                  formAction: submission ? submission.formAction : undefined,\n                  formEncType: submission ? submission.formEncType : undefined,\n                  formData: submission ? submission.formData : undefined\n                },\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 20:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n                var _ref22 = _slicedToArray(_ref8, 4),\n                    href = _ref22[1],\n                    match = _ref22[2],\n                    fetchMatches = _ref22[3];\n\n                return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, href, request.signal), match, fetchMatches, router.basename);\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n                var _ref23 = _slicedToArray(_ref9, 3),\n                    match = _ref23[2];\n\n                return match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n            key = _step5$value[0],\n            id = _step5$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref10) {\n    var currentLocation = _ref10.currentLocation,\n        nextLocation = _ref10.nextLocation,\n        historyAction = _ref10.historyAction;\n\n    if (activeBlocker == null) {\n      return;\n    } // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n\n\n    var blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(blockerFunction, \"Could not find a function for the active blocker\");\n    var blocker = state.blockers.get(activeBlocker);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return activeBlocker;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request, _temp2) {\n      var _ref24, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref24 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref24.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\")) {\n                _context10.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n\n              _error3 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error3),\n                statusCode: _error3.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n\n            case 17:\n              result = _context10.sent;\n\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp3) {\n      var _ref25, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref25 = _temp3 === void 0 ? {} : _temp3, routeId = _ref25.routeId, requestContext = _ref25.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n\n            case 20:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              if (!result.actionData) {\n                _context11.next = 28;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n\n            case 28:\n              if (!result.loaderData) {\n                _context11.next = 32;\n                break;\n              }\n\n              data = Object.values(result.loaderData)[0];\n\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n\n              return _context11.abrupt(\"return\", data);\n\n            case 32:\n              return _context11.abrupt(\"return\", undefined);\n\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error4, boundaryMatch, _context13, loaderRequest, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n            case 9:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              _error4 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 19;\n                break;\n              }\n\n              throw _error4;\n\n            case 19:\n              result = {\n                type: ResultType.error,\n                error: _error4\n              };\n\n            case 20:\n              if (!isRouteRequest) {\n                _context14.next = 24;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 23;\n                break;\n              }\n\n              throw result.error;\n\n            case 23:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context14.next = 30;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 28;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n\n            case 28:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 33;\n              return loadRouteData(loaderRequest, matches, requestContext);\n\n            case 33:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 35:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n              })));\n\n            case 9:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  var submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(history, state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref11, key) {\n    var _ref28 = _slicedToArray(_ref11, 3),\n        href = _ref28[0],\n        match = _ref28[1],\n        fetchMatches = _ref28[2]; // This fetcher was cancelled from a prior action submission - force reload\n\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(history, href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(history, currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = history.createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = history.createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nfunction callLoaderOrAction(_x59, _x60, _x61, _x62, _x63, _x64, _x65, _x66) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, isAbsolute, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, data, contentType;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (basename === void 0) {\n              basename = \"/\";\n            }\n\n            if (isStaticRequest === void 0) {\n              isStaticRequest = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n\n            onReject = function onReject() {\n              return reject();\n            };\n\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 6;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 11;\n            return Promise.race([handler({\n              request: request,\n              params: match.params,\n              context: requestContext\n            }), abortPromise]);\n\n          case 11:\n            result = _context16.sent;\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context16.next = 19;\n            break;\n\n          case 15:\n            _context16.prev = 15;\n            _context16.t0 = _context16[\"catch\"](6);\n            resultType = ResultType.error;\n            result = _context16.t0;\n\n          case 19:\n            _context16.prev = 19;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(19);\n\n          case 22:\n            if (!isResponse(result)) {\n              _context16.next = 48;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!redirectStatusCodes.has(status)) {\n              _context16.next = 33;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n            isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location); // Support relative routing in internal redirects\n\n            if (!isAbsolute) {\n              activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n              routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n                return match.pathnameBase;\n              });\n              resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n              invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n              if (basename) {\n                path = resolvedLocation.pathname;\n                resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n              }\n\n              location = createPath(resolvedLocation);\n            } else if (!isStaticRequest) {\n              // Strip off the protocol+origin for same-origin absolute redirects.\n              // If this is a static reques, we can let it go back to the browser\n              // as-is\n              currentUrl = new URL(request.url);\n              url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n\n              if (url.origin === currentUrl.origin) {\n                location = url.pathname + url.search + url.hash;\n              }\n            } // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n\n            if (!isStaticRequest) {\n              _context16.next = 32;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 32:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 33:\n            if (!isRouteRequest) {\n              _context16.next = 35;\n              break;\n            }\n\n            throw {\n              type: resultType || ResultType.data,\n              response: result\n            };\n\n          case 35:\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context16.next = 42;\n              break;\n            }\n\n            _context16.next = 39;\n            return result.json();\n\n          case 39:\n            data = _context16.sent;\n            _context16.next = 45;\n            break;\n\n          case 42:\n            _context16.next = 44;\n            return result.text();\n\n          case 44:\n            data = _context16.sent;\n\n          case 45:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 47;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 47:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 48:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 50;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 50:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 52;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n\n          case 52:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 53:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n        key = _revalidatingFetchers[0],\n        match = _revalidatingFetchers[2];\n\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator7 = _createForOfIteratorHelper(matches),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined) {\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  var _ref29 = _temp4 === void 0 ? {} : _temp4,\n      pathname = _ref29.pathname,\n      routeId = _ref29.routeId,\n      method = _ref29.method,\n      type = _ref29.type;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nfunction resolveDeferredResults(_x67, _x68, _x69, _x70, _x71, _x72) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime.wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x73, _x74, _x75) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context19.sent;\n\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n\n            return _context19.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","nextAction","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","explodeOptionalSegments","exploded","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","optional","param","prefix","__","str","star","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeysSet","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","activeBlocker","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref10","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","onReject","handler","resultType","isAbsolute","activeMatches","resolvedLocation","protocol","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches"],"sources":["C:\\xampp\\htdocs\\Web-Direktori-Pariwisata\\node_modules\\@remix-run\\router\\history.ts","C:\\xampp\\htdocs\\Web-Direktori-Pariwisata\\node_modules\\@remix-run\\router\\utils.ts","C:\\xampp\\htdocs\\Web-Direktori-Pariwisata\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    let nextAction = Action.Pop;\n    let nextIndex = getIndex();\n\n    if (nextIndex != null) {\n      let delta = nextIndex - index;\n      action = nextAction;\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: history.location, delta });\n      }\n    } else {\n      warning(\n        false,\n        // TODO: Write up a doc that explains our blocking strategy in detail\n        // and link to it here so people can understand better what is going on\n        // and how to avoid it.\n        `You are trying to block a POP navigation to a location that was not ` +\n          `created by @remix-run/router. The block will fail silently in ` +\n          `production, but in general you should do all navigation with the ` +\n          `router (instead of using window.history.pushState directly) ` +\n          `to avoid this situation.`\n      );\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n  let activeBlocker: string | null = null;\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n        if (blockerKey) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (isBrowser && typeof window?.location !== \"undefined\") {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (activeBlocker == null) {\n      return;\n    }\n\n    // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n    let blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(\n      blockerFunction,\n      \"Could not find a function for the active blocker\"\n    );\n    let blocker = state.blockers.get(activeBlocker);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return activeBlocker;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          history,\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          history,\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  history: History,\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = history.createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = history.createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location);\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}